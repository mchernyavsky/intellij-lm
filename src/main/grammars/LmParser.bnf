{
    parserClass = "org.lm.parser.LmParser"

    implements = 'org.lm.psi.ext.LmElement'
    extends = 'org.lm.psi.ext.LmElementImpl'

    elementTypeHolderClass = "org.lm.psi.LmElementTypes"

    elementTypeClass = "org.lm.psi.LmElementType"
    tokenTypeClass = "org.lm.psi.LmTokenType"

    psiClassPrefix = "Lm"
    psiImplClassSuffix = "Impl"
    psiPackage = "org.lm.psi"
    psiImplPackage = "org.lm.psi.impl"

    generateTokenAccessors = true

    tokens = [
        LPAREN     = '('
        RPAREN     = ')'
        LBRACE     = '{'
        RBRACE     = '}'

        ASSIGN     = '='
        DOT        = '.'

        ADD        = '+'
        SUB        = '-'
        MUL        = '*'
        DIV        = '/'

        MODULE_KW  = 'module'
        IMPORT_KW  = 'import'
        INCLUDE_KW = 'include'

        DEF_KW     = 'def'

        FUN_KW     = 'fun'
        FIX_KW     = 'fix'

        LET_KW     = 'let'
        LETREC_KW  = 'letrec'
        LETPAR_KW  = 'letpar'
        IN_KW      = 'in'

        IFZ_KW     = 'ifz'
        THEN_KW    = 'then'
        ELSE_KW    = 'else'

        LINE_COMMENT = "regexp:#[^\r\n]*"
    ]

    extends("command|definition") = statement
    extends("module|variable") = definition
    extends("let(Seq|Rec|Par)") = let
}

program ::= statement*

statement ::= command | definition

command ::= (IMPORT_KW | INCLUDE_KW) qualifiedId

definition ::= module | variable {
    implements = "org.lm.psi.ext.LmNamedElement"
    mixin = "org.lm.psi.ext.LmStubbedNamedElementImpl"
}

module ::= MODULE_KW definitionId LBRACE statement* RBRACE {
    mixin = "org.lm.psi.ext.LmModuleMixin"
    stubClass = "org.lm.psi.stubs.LmModuleStub"
    elementTypeFactory = "org.lm.psi.stubs.StubImplementationsKt.factory"
}

variable ::= DEF_KW definitionId ASSIGN expression {
    mixin = "org.lm.psi.ext.LmVariableMixin"
    stubClass = "org.lm.psi.stubs.LmVariableStub"
    elementTypeFactory = "org.lm.psi.stubs.StubImplementationsKt.factory"
}

expression ::= qualifiedId
    | function
    | let
    | IFZ_KW expression THEN_KW expression (ELSE_KW expression)?
    | LPAREN expression expression RPAREN
    | LPAREN expression (ADD | SUB | MUL | DIV) expression RPAREN
    | INT

function ::= (FUN_KW | FIX_KW) parameter LBRACE expression RBRACE

parameter ::= definitionId {
    implements = "org.lm.psi.ext.LmNamedElement"
    mixin = "org.lm.psi.ext.LmNamedElementImpl"
}

let ::= letSeq | letRec | letPar

letSeq ::= LET_KW binding* IN_KW expression

letRec ::= LETREC_KW binding* IN_KW expression

letPar ::= LETPAR_KW binding* IN_KW expression

binding ::= definitionId ASSIGN expression {
    implements = "org.lm.psi.ext.LmNamedElement"
    mixin = "org.lm.psi.ext.LmNamedElementImpl"
}

definitionId ::= ID {
    implements = "org.lm.psi.ext.LmReferenceElement"
    mixin = "org.lm.psi.ext.LmDefinitionIdImplMixin"
}

qualifiedId ::= qualifiedIdPart (DOT qualifiedIdPart)*

qualifiedIdPart ::= ID {
    implements = "org.lm.psi.ext.LmReferenceElement"
    mixin = "org.lm.psi.ext.LmQualifiedIdPartImplMixin"
}
